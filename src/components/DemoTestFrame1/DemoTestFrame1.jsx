/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import { Avatar, Button, Switch, FormControlLabel, TextField } from '@mui/material';
import Avatar1Image from 'src/assets/images/demotestframe1_Avatar.png';
import { styled } from '@mui/material/styles';
import DemoTestFrame2 from 'src/components/DemoTestFrame2/DemoTestFrame2';

 
const DemoTestFrame11 = styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  width: "100%",  
  height: `362px`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  overflow: `hidden`,  
});
  
const Avatar1 = styled(Avatar)({  
  position: `absolute`,  
  left: `240px`,  
  top: `24px`,  
  width: `24px`,  
  height: `24px`,  
});
  
const Avatar2 = styled(Avatar)({  
  position: `absolute`,  
  left: `232px`,  
  top: `88px`,  
  width: `40px`,  
  height: `40px`,  
});
  
const Frame4 = styled("div")({  
  display: `flex`,  
  position: `absolute`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `298px`,  
  height: `202px`,  
  left: `48px`,  
  top: `160px`,  
  overflow: `hidden`,  
});
  
const DemoTestFrame21 = styled(DemoTestFrame2)(({ theme }) =>({  
  width: `272px`,  
  height: `193px`,  
  position: `absolute`,  
  left: `14px`,  
  top: `36px`,  
}));
  
const ButtonOutlined = styled(Button)({  
  position: `absolute`,  
  left: `358px`,  
  top: `196px`,  
});
  
const FormControlLabel1 = styled(FormControlLabel)({  
  position: `absolute`,  
  left: `203px`,  
  top: `162px`,  
  margin: `0px`,  
});
  
const TextFieldStandard = styled(TextField)({  
  width: `220px`,  
  position: `absolute`,  
  left: `142px`,  
  top: `168px`,  
});
  
const Hola = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Caption"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Caption"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Caption"].fontWeight,  
  fontSize: theme.typography["Typography"]["Caption"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Caption"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Caption"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Caption"].lineHeight,  
  textTransform: theme.typography["Typography"]["Caption"].textTransform,  
  width: `103px`,  
  position: `absolute`,  
  left: `344px`,  
  top: `118px`,  
}));
  
const Frame5 = styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  display: `flex`,  
  position: `absolute`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `321px`,  
  height: `209px`,  
  left: `488px`,  
  top: `196px`,  
  overflow: `hidden`,  
});
  
const EstoNoEsFont = styled("div")({  
  textAlign: `right`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Supermercado`,  
  fontWeight: `400`,  
  fontSize: `12px`,  
  letterSpacing: `0.4000000059604645px`,  
  textDecoration: `none`,  
  lineHeight: `165.9999966621399%`,  
  textTransform: `lowercase`,  
  position: `absolute`,  
  left: `-16px`,  
  top: `27px`,  
});
  
const Lato = styled("div")({  
  textAlign: `center`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Lato`,  
  fontWeight: `900`,  
  fontSize: `12px`,  
  letterSpacing: `0.4000000059604645px`,  
  textDecoration: `none`,  
  lineHeight: `165.9999966621399%`,  
  textTransform: `lowercase`,  
  position: `absolute`,  
  left: `612px`,  
  top: `43px`,  
});
  
const OpenSans = styled("div")({  
  textAlign: `center`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Open Sans`,  
  fontWeight: `600`,  
  fontSize: `12px`,  
  letterSpacing: `0.4000000059604645px`,  
  textDecoration: `none`,  
  lineHeight: `165.9999966621399%`,  
  textTransform: `lowercase`,  
  position: `absolute`,  
  left: `683px`,  
  top: `43px`,  
});
  
const GemunuLibre = styled("div")({  
  textAlign: `center`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Gemunu Libre`,  
  fontWeight: `600`,  
  fontSize: `12px`,  
  letterSpacing: `0.4000000059604645px`,  
  textDecoration: `none`,  
  lineHeight: `165.9999966621399%`,  
  textTransform: `lowercase`,  
  position: `absolute`,  
  left: `762px`,  
  top: `55px`,  
});
  
const Roboto = styled("div")({  
  textAlign: `center`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Roboto`,  
  fontWeight: `600`,  
  fontSize: `12px`,  
  letterSpacing: `0.4000000059604645px`,  
  textDecoration: `none`,  
  lineHeight: `165.9999966621399%`,  
  textTransform: `lowercase`,  
  position: `absolute`,  
  left: `535px`,  
  top: `43px`,  
});
  
const Lato1 = styled("div")({  
  textAlign: `center`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Lato`,  
  fontWeight: `300`,  
  fontSize: `12px`,  
  letterSpacing: `0.4000000059604645px`,  
  textDecoration: `none`,  
  lineHeight: `165.9999966621399%`,  
  textTransform: `lowercase`,  
  position: `absolute`,  
  left: `613px`,  
  top: `80px`,  
});
  
const OpenSans1 = styled("div")({  
  textAlign: `center`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Open Sans`,  
  fontWeight: `600`,  
  fontSize: `12px`,  
  letterSpacing: `0.4000000059604645px`,  
  textDecoration: `none`,  
  lineHeight: `165.9999966621399%`,  
  textTransform: `lowercase`,  
  position: `absolute`,  
  left: `683px`,  
  top: `80px`,  
});
  
const GemunuLibre1 = styled("div")({  
  textAlign: `center`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Gemunu Libre`,  
  fontWeight: `600`,  
  fontSize: `12px`,  
  letterSpacing: `0.4000000059604645px`,  
  textDecoration: `none`,  
  lineHeight: `165.9999966621399%`,  
  textTransform: `lowercase`,  
  position: `absolute`,  
  left: `762px`,  
  top: `92px`,  
});
  
const Roboto1 = styled("div")({  
  textAlign: `center`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Roboto`,  
  fontWeight: `600`,  
  fontSize: `12px`,  
  letterSpacing: `0.4000000059604645px`,  
  textDecoration: `none`,  
  lineHeight: `165.9999966621399%`,  
  textTransform: `lowercase`,  
  position: `absolute`,  
  left: `535px`,  
  top: `80px`,  
});
  
const Lato2 = styled("div")({  
  textAlign: `right`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Lato`,  
  fontWeight: `400`,  
  fontSize: `12px`,  
  letterSpacing: `0.4000000059604645px`,  
  textDecoration: `line-through`,  
  lineHeight: `165.9999966621399%`,  
  textTransform: `lowercase`,  
  position: `absolute`,  
  left: `606px`,  
  top: `119px`,  
});
  
const OpenSans2 = styled("div")({  
  textAlign: `center`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Open Sans`,  
  fontWeight: `600`,  
  fontSize: `12px`,  
  letterSpacing: `0.4000000059604645px`,  
  textDecoration: `none`,  
  lineHeight: `165.9999966621399%`,  
  textTransform: `lowercase`,  
  position: `absolute`,  
  left: `676px`,  
  top: `119px`,  
});
  
const GemunuLibre2 = styled("div")({  
  textAlign: `center`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Gemunu Libre`,  
  fontWeight: `600`,  
  fontSize: `12px`,  
  letterSpacing: `0.4000000059604645px`,  
  textDecoration: `none`,  
  lineHeight: `165.9999966621399%`,  
  textTransform: `lowercase`,  
  position: `absolute`,  
  left: `755px`,  
  top: `131px`,  
});
  
const Roboto2 = styled("div")({  
  textAlign: `center`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Roboto`,  
  fontWeight: `600`,  
  fontSize: `12px`,  
  letterSpacing: `0.4000000059604645px`,  
  textDecoration: `none`,  
  lineHeight: `165.9999966621399%`,  
  textTransform: `lowercase`,  
  position: `absolute`,  
  left: `528px`,  
  top: `119px`,  
});
 
function DemoTestFrame1(props) {
  return (
    <DemoTestFrame11  className={props.className}   >
      <Avatar1 variant="rounded" src={Avatar1Image} alt={"Avatar"}   />
      <Avatar2 variant="square"  >OP</Avatar2>
      <Frame4 >
        <DemoTestFrame21   />
      </Frame4>
      <ButtonOutlined variant="outlined" size="medium" color="info"    > Medium </ButtonOutlined>
      <FormControlLabel1 control={<Switch defaultChecked={true} color="warning" size="medium" />} label={"Label"} />
      <TextFieldStandard variant="standard" size="small"  label={`Label`}    />
      <Hola >
        {`hola
`}
          </Hola>
      <Frame5 >
        <EstoNoEsFont >
          {`esto no es font
`}
            </EstoNoEsFont>
      </Frame5>
      <Lato >
        {`lato`}
          </Lato>
      <OpenSans >
        {`open sans`}
          </OpenSans>
      <GemunuLibre >
        {`gemunu libre
`}
          </GemunuLibre>
      <Roboto >
        {`roboto`}
          </Roboto>
      <Lato1 >
        {`lato`}
          </Lato1>
      <OpenSans1 >
        {`open sans`}
          </OpenSans1>
      <GemunuLibre1 >
        {`gemunu libre
`}
          </GemunuLibre1>
      <Roboto1 >
        {`roboto`}
          </Roboto1>
      <Lato2 >
        {`lato`}
          </Lato2>
      <OpenSans2 >
        {`open sans`}
          </OpenSans2>
      <GemunuLibre2 >
        {`gemunu libre
`}
          </GemunuLibre2>
      <Roboto2 >
        {`roboto`}
          </Roboto2>
    </DemoTestFrame11>
  );
}

export default DemoTestFrame1;
